1st telecon
deepak verma
08/04/2008

Vote: not inclined
Reason: poor at coding and ds

questions:
1. common chars between two strings
example: given two strings like 9866184948 and 9886998148 list all common characters.

solution: he went off into a slightly harder solution with sorting the characters of the strings and then traversing the strings matching characters. but his first implentation was rather buggy and he simple could not find any of the bugs until I explicitly pointed out each of them.
* his quicksort prototype was quicksort(char *, int start, int end)
but he was calling it like quicksort(char*, int start, int length)
I tried hinting him by asking him to clearly defnie the prototype of the method and the pre-conditions on the input but he never caught the hint until I showed his bug directly.
* his first implementation broke down for such simple cases as {"12","23"} and despite multiple suggestions to go over his code, he couldn't find the bug until i gave him this test case.

/////////////////////////////////////////////
quicksort(char *p, int start, int end);
//inplace sort good here
//p not null
//start < end
//0,5

void compare(char *s1, char *s2){
    int i = 0, j=0;
    quicksort(s1,0,strlen(s1)-1);  //this is an issue, fixed, strlen -1
    quicksort(s2,0,strlen(s2)-1);


    //quicksort complexity: always nlogn?
    //worst case n^2
    //
    //sort can't be faster
    
    while(s1[i]!='\0' && s2[j]!='\0'){
        if(s1[i]==s2[j]){
            print s1[i];

            do{
                i++;
            }while(s1[i]==s1[i+1]);

            do{
                j++;
            }while(s2[j]==s2[j+1]);
        }
        else if(s1[i]>s2[j]){
            do{
                j++;
            }while(s2[j]==s2[j+1]);
        }
        else{
            do{
                i++;
            }while(s1[i]==s1[i+1]);
        }
    } 
}
/////////////////////////////////////////////

comments: poor coding skills, clearly did not try his solution on any test case apart from mine, despite being given a lot of time and there were fundamental flaws that could be seen without even running through a test case.

When discussing complexity, he was confused about quicksort complexity and said it was indeed the most optimal sort. but then he suddenly realised he could solve this problem by using an array of counts indexed against the character or digit values. but then I don't think he connected it to any other sort algorithm either but did realise that there is a linear time solution to this problem.

2. associative array?
    1. hash_table?
    2. map
    3. hash_table versus array : integer or non-integer, large integer
    4. any other data structure similar to hash_table
        1. why not a bst for example?  
answer: Didn't know much about hash_table implementations. Did not know what an associative array or a map was. And was of the understanding that hash_tables are always built using chaining of colliding keys.

also could not give a concrete reason for using a hash_table over a plain array. 

3. OO
    1. polymorphism, compile-time/static versus runtime. 
    2. abstract class versus interface

wasn't particularly confident in simple OO concepts too. Especially when he was giving only function overloading as an example of polymorphism in C++ Only with later suggestion did he come to runtime polymorphism with object methods.


