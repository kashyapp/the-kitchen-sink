Added two more problems to the set. 

================================================================================

Problem 1) Partition [Medium]

Given a list of integers L, and an index k where k is a valid index into the
list, write a function to do an in-place partitioning of the list and return two
indices p1 and p2 such that each of L[0...p1) < L[k]
        and     L[p1...p2) = L[k]
        and     L[p2...n) > L[k]

Here, L[i1...i2) is the sublist including index i1 and excluding index i2

Example: L = {5, 4, 3, 2, 1}, k = 2
     After calling the function, L = {2, 1, 3, 5, 4}
     and the return value should be the pair {2,3}

Assumptions: a) List is 0-indexed
     b) The specific order of elements within the sublists is unimportant.

================================================================================

Problem 2) Rotate [Medium-Hard]

Rotate a one dimensional vector of n elements left by i positions. For instance,
with n=8 and i=3, the vector {a,b,c,d,e,f,g,h} is rotated to {d,e,f,g,h,a,b,c}. 
A simple implementation would use an intermediate vector to
do the job in n steps. Try and do the rotation in time proportional to n using
only constant extra space. Write a function that takes the vector as an 
argument.

================================================================================

Problem 3) Anagrams [Easy]

Given a dictionary of English words, find all the sets of anagrams. For example, 
      ‘pots’, ‘stop’ and ‘post’ are all anagrams of each other. Write a function 
      that takes the dictionary as a list of strings and prints out all the 
      anagram sets.

Example:
Dictionary = {‘arab’, ‘barb’, ‘brat’, ‘post’, ‘pots’, ‘stamp’, ‘stop’}

Output:  arab barb
       post pots stop 

================================================================================

Problem 4) Byte order reversal [Easy]
Write a function that takes a 4-byte unsigned integer and returns an unsigned 
integer constructed with the reversed bytes of the input integer.

Example 1) (represented in hex for clarity)
Argument: 0x00000010   (2)
Returns : 0x10000000   (268435456)
Example 2 Argument: 0xAABB12FE   (2864386814)
Returns : 0xFE12BBAA   (4262640554)


================================================================================

Problem 5) There is a certain alphabet in which the collating order (the order 
of the characters) is not known. However, we have a dictionary of words in that 
alphabet with the words of the dictionary known to be sorted order. Reconstruct
the collating order.

eg: 
input: 
XWY
ZX
ZXY
ZXW
YWWX

output:
XZYW

assume that the input is well formed and that a complete ordering of the alphabet
can be derived from the input without ambiguity.

================================================================================

Problem 6) Given a fixed dictionary of words and a search string, find all the 
words in the dictinary that contain the search string. (Example is genome search)
